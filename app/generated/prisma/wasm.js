
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TradeAnalyzerDataScalarFieldEnum = {
  id: 'id',
  name: 'name',
  position: 'position',
  team: 'team',
  marketValue: 'marketValue',
  myValue: 'myValue',
  valueDiffBetweenMyValueAndMarketValue: 'valueDiffBetweenMyValueAndMarketValue',
  PRPScore: 'PRPScore',
  projectedNextOffseasonDynastyValue: 'projectedNextOffseasonDynastyValue',
  valueDifferenceBetweenCurrentMarketValueAndPNODV: 'valueDifferenceBetweenCurrentMarketValueAndPNODV',
  PNODVScore: 'PNODVScore',
  RVSScore: 'RVSScore',
  jaxValue: 'jaxValue',
  travValue: 'travValue',
  joeValue: 'joeValue',
  consensusValue: 'consensusValue'
};

exports.Prisma.PlayerStatScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  playerName: 'playerName',
  playerDisplayName: 'playerDisplayName',
  position: 'position',
  positionGroup: 'positionGroup',
  headshotUrl: 'headshotUrl',
  recentTeam: 'recentTeam',
  season: 'season',
  week: 'week',
  seasonType: 'seasonType',
  opponentTeam: 'opponentTeam',
  completions: 'completions',
  attempts: 'attempts',
  passingYards: 'passingYards',
  passingTds: 'passingTds',
  interceptions: 'interceptions',
  sacks: 'sacks',
  sackYards: 'sackYards',
  sackFumbles: 'sackFumbles',
  sackFumblesLost: 'sackFumblesLost',
  passingAirYards: 'passingAirYards',
  passingYardsAfterCatch: 'passingYardsAfterCatch',
  passingFirstDowns: 'passingFirstDowns',
  passingEpa: 'passingEpa',
  passing2ptConversions: 'passing2ptConversions',
  pacr: 'pacr',
  dakota: 'dakota',
  carries: 'carries',
  rushingYards: 'rushingYards',
  rushingTds: 'rushingTds',
  rushingFumbles: 'rushingFumbles',
  rushingFumblesLost: 'rushingFumblesLost',
  rushingFirstDowns: 'rushingFirstDowns',
  rushingEpa: 'rushingEpa',
  rushing2ptConversions: 'rushing2ptConversions',
  receptions: 'receptions',
  targets: 'targets',
  receivingYards: 'receivingYards',
  receivingTds: 'receivingTds',
  receivingFumbles: 'receivingFumbles',
  receivingFumblesLost: 'receivingFumblesLost',
  receivingAirYards: 'receivingAirYards',
  receivingYardsAfterCatch: 'receivingYardsAfterCatch',
  receivingFirstDowns: 'receivingFirstDowns',
  receivingEpa: 'receivingEpa',
  receiving2ptConversions: 'receiving2ptConversions',
  racr: 'racr',
  targetShare: 'targetShare',
  airYardsShare: 'airYardsShare',
  wopr: 'wopr',
  specialTeamsTds: 'specialTeamsTds',
  fantasyPoints: 'fantasyPoints',
  fantasyPointsPpr: 'fantasyPointsPpr'
};

exports.Prisma.ReceivingStatScalarFieldEnum = {
  id: 'id',
  player: 'player',
  playerId: 'playerId',
  position: 'position',
  teamName: 'teamName',
  playerGameCount: 'playerGameCount',
  avgDepthOfTarget: 'avgDepthOfTarget',
  avoidedTackles: 'avoidedTackles',
  caughtPercent: 'caughtPercent',
  contestedCatchRate: 'contestedCatchRate',
  contestedReceptions: 'contestedReceptions',
  contestedTargets: 'contestedTargets',
  declinedPenalties: 'declinedPenalties',
  dropRate: 'dropRate',
  drops: 'drops',
  firstDowns: 'firstDowns',
  franchiseId: 'franchiseId',
  fumbles: 'fumbles',
  gradesHandsDrop: 'gradesHandsDrop',
  gradesHandsFumble: 'gradesHandsFumble',
  gradesOffense: 'gradesOffense',
  gradesPassBlock: 'gradesPassBlock',
  gradesPassRoute: 'gradesPassRoute',
  inlineRate: 'inlineRate',
  inlineSnaps: 'inlineSnaps',
  interceptions: 'interceptions',
  longest: 'longest',
  passBlockRate: 'passBlockRate',
  passBlocks: 'passBlocks',
  passPlays: 'passPlays',
  penalties: 'penalties',
  receptions: 'receptions',
  routeRate: 'routeRate',
  routes: 'routes',
  slotRate: 'slotRate',
  slotSnaps: 'slotSnaps',
  targetedQbRating: 'targetedQbRating',
  targets: 'targets',
  touchdowns: 'touchdowns',
  wideRate: 'wideRate',
  wideSnaps: 'wideSnaps',
  yards: 'yards',
  yardsAfterCatch: 'yardsAfterCatch',
  yardsAfterCatchPerReception: 'yardsAfterCatchPerReception',
  yardsPerReception: 'yardsPerReception',
  yprr: 'yprr',
  season: 'season'
};

exports.Prisma.PlayerSeasonScalarFieldEnum = {
  player_id: 'player_id',
  player_name: 'player_name',
  season: 'season',
  games_played: 'games_played',
  position: 'position',
  completions_total: 'completions_total',
  attempts_total: 'attempts_total',
  passing_yards_total: 'passing_yards_total',
  passing_tds_total: 'passing_tds_total',
  interceptions_total: 'interceptions_total',
  passing_first_downs_total: 'passing_first_downs_total',
  carries_total: 'carries_total',
  rushing_yards_total: 'rushing_yards_total',
  rushing_tds_total: 'rushing_tds_total',
  rushing_fumbles_total: 'rushing_fumbles_total',
  rushing_fumbles_lost_total: 'rushing_fumbles_lost_total',
  rushing_first_downs_total: 'rushing_first_downs_total',
  targets_total: 'targets_total',
  receptions_total: 'receptions_total',
  receiving_yards_total: 'receiving_yards_total',
  receiving_tds_total: 'receiving_tds_total',
  receiving_air_yards_total: 'receiving_air_yards_total',
  receiving_yards_after_catch_total: 'receiving_yards_after_catch_total',
  receiving_first_downs_total: 'receiving_first_downs_total',
  fantasy_points_total: 'fantasy_points_total',
  completions_avg: 'completions_avg',
  attempts_avg: 'attempts_avg',
  passing_yards_avg: 'passing_yards_avg',
  passing_tds_avg: 'passing_tds_avg',
  interceptions_avg: 'interceptions_avg',
  passing_air_yards_avg: 'passing_air_yards_avg',
  passing_yards_after_catch_avg: 'passing_yards_after_catch_avg',
  passing_first_downs_avg: 'passing_first_downs_avg',
  carries_avg: 'carries_avg',
  rushing_yards_avg: 'rushing_yards_avg',
  rushing_tds_avg: 'rushing_tds_avg',
  rushing_fumbles_avg: 'rushing_fumbles_avg',
  rushing_fumbles_lost_avg: 'rushing_fumbles_lost_avg',
  rushing_first_downs_avg: 'rushing_first_downs_avg',
  rushing_epa_avg: 'rushing_epa_avg',
  receptions_avg: 'receptions_avg',
  targets_avg: 'targets_avg',
  receiving_yards_avg: 'receiving_yards_avg',
  receiving_tds_avg: 'receiving_tds_avg',
  receiving_air_yards_avg: 'receiving_air_yards_avg',
  receiving_yards_after_catch_avg: 'receiving_yards_after_catch_avg',
  receiving_first_downs_avg: 'receiving_first_downs_avg',
  receiving_epa_avg: 'receiving_epa_avg',
  racr_avg: 'racr_avg',
  target_share_avg: 'target_share_avg',
  air_yards_share_avg: 'air_yards_share_avg',
  wopr_avg: 'wopr_avg',
  fantasy_points_avg: 'fantasy_points_avg',
  fantasy_points_ppr_avg: 'fantasy_points_ppr_avg',
  YPRR: 'YPRR',
  routes: 'routes',
  routes_per_game: 'routes_per_game',
  TPRR: 'TPRR',
  firstDPRR: 'firstDPRR'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  tradeAnalyzerData: 'tradeAnalyzerData',
  PlayerStat: 'PlayerStat',
  ReceivingStat: 'ReceivingStat',
  PlayerSeason: 'PlayerSeason'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
