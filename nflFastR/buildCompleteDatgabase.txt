Build a Complete nflfastR Data Set
Source: R/build_nflfastR_pbp.R
build_nflfastR_pbp is a convenient wrapper around 6 nflfastR functions:

fast_scraper()

clean_pbp()

add_qb_epa()

add_xyac()

add_xpass()

decode_player_ids()

Please see either the documentation of each function or the nflfastR Field Descriptions website to learn about the output.

Usage
build_nflfastR_pbp(
  game_ids,
  dir = getOption("nflfastR.raw_directory", default = NULL),
  ...,
  decode = TRUE,
  rules = TRUE
)
Arguments
game_ids
Vector of character ids or a data frame including the variable game_id (see details for further information).

dir
Path to local directory (defaults to option "nflfastR.raw_directory") where nflfastR searches for raw game play-by-play data. See save_raw_pbp() for additional information.

...
Additional arguments passed to the scraping functions (for internal use)

decode
If TRUE, the function decode_player_ids() will be executed.

rules
If FALSE, printing of the header and footer in the console output will be suppressed.

Value
An nflfastR play-by-play data frame like it can be loaded from https://github.com/nflverse/nflverse-data.

Details
To load valid game_ids please use the package function fast_scraper_schedules().

See also
For information on parallel processing and progress updates please see nflfastR.

Examples
# \donttest{
# Build nflfastR pbp for the 2018 and 2019 Super Bowls
try({# to avoid CRAN test problems
build_nflfastR_pbp(c("2018_21_NE_LA", "2019_21_SF_KC"))
})
#> ── Build nflfastR Play-by-Play Data ───────────── nflfastR version 5.1.0.9000 ──
#> • 08:29:55 | Start download of 2 games...
#> ℹ It is recommended to use parallel processing when trying to load multiple games.Please consider running `future::plan("multisession")`! Will go on sequentially...
#> ✔ 08:29:58 | Download finished. Adding variables...
#> ✔ 08:29:59 | added game variables
#> ✔ 08:29:59 | added nflscrapR variables
#> ✔ 08:30:00 | added ep variables
#> ✔ 08:30:00 | added air_yac_ep variables
#> ✔ 08:30:00 | added wp variables
#> ✔ 08:30:00 | added air_yac_wp variables
#> ✔ 08:30:00 | added cp and cpoe
#> ✔ 08:30:00 | added fixed drive variables
#> ✔ 08:30:00 | added series variables
#> • 08:30:00 | Cleaning up play-by-play...
#> ✔ 08:30:01 | Cleaning completed
#> ✔ 08:30:01 | added qb_epa
#> • 08:30:01 | Computing xyac...
#> ✔ 08:30:02 | added xyac variables
#> • 08:30:02 | Computing xpass...
#> ✔ 08:30:03 | added xpass and pass_oe
#> • 08:30:03 | Decode player ids...
#> ✔ 08:30:04 | Decoding of player ids completed
#> ── DONE ────────────────────────────────────────────────────────────────────────
#> ── nflverse play by play ───────────────────────────────────────────────────────
#> ℹ Data updated: 2025-06-05 08:30:04 UTC
#> # A tibble: 349 × 372
#>    play_id game_id     old_game_id home_team away_team season_type  week posteam
#>      <dbl> <chr>       <chr>       <chr>     <chr>     <chr>       <int> <chr>  
#>  1       1 2018_21_NE… 2019020300  LA        NE        POST           21 NA     
#>  2      38 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  3      67 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  4      89 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  5     111 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  6     133 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  7     155 2018_21_NE… 2019020300  LA        NE        POST           21 NE     
#>  8     182 2018_21_NE… 2019020300  LA        NE        POST           21 LA     
#>  9     204 2018_21_NE… 2019020300  LA        NE        POST           21 LA     
#> 10     226 2018_21_NE… 2019020300  LA        NE        POST           21 LA     
#> # ℹ 339 more rows
#> # ℹ 364 more variables: posteam_type <chr>, defteam <chr>, side_of_field <chr>,
#> #   yardline_100 <dbl>, game_date <chr>, quarter_seconds_remaining <dbl>,
#> #   half_seconds_remaining <dbl>, game_seconds_remaining <dbl>,
#> #   game_half <chr>, quarter_end <dbl>, drive <dbl>, sp <dbl>, qtr <dbl>,
#> #   down <dbl>, goal_to_go <int>, time <chr>, yrdln <chr>, ydstogo <dbl>,
#> #   ydsnet <dbl>, desc <chr>, play_type <chr>, yards_gained <dbl>, …

# It is also possible to directly use the
# output of `fast_scraper_schedules` as input
try({# to avoid CRAN test problems
library(dplyr, warn.conflicts = FALSE)
fast_scraper_schedules(2020) |>
  slice_tail(n = 3) |>
  build_nflfastR_pbp()
 })
#> ── Build nflfastR Play-by-Play Data ───────────── nflfastR version 5.1.0.9000 ──
#> • 08:30:04 | Start download of 3 games...
#> ℹ It is recommended to use parallel processing when trying to load multiple games.Please consider running `future::plan("multisession")`! Will go on sequentially...
#> ✔ 08:30:07 | Download finished. Adding variables...
#> ✔ 08:30:07 | added game variables
#> ✔ 08:30:08 | added nflscrapR variables
#> ✔ 08:30:08 | added ep variables
#> ✔ 08:30:08 | added air_yac_ep variables
#> ✔ 08:30:08 | added wp variables
#> ✔ 08:30:08 | added air_yac_wp variables
#> ✔ 08:30:08 | added cp and cpoe
#> ✔ 08:30:08 | added fixed drive variables
#> ✔ 08:30:09 | added series variables
#> • 08:30:09 | Cleaning up play-by-play...
#> ✔ 08:30:09 | Cleaning completed
#> ✔ 08:30:09 | added qb_epa
#> • 08:30:09 | Computing xyac...
#> ✔ 08:30:10 | added xyac variables
#> • 08:30:10 | Computing xpass...
#> ✔ 08:30:10 | added xpass and pass_oe
#> • 08:30:10 | Decode player ids...
#> ✔ 08:30:10 | Decoding of player ids completed
#> ── DONE ────────────────────────────────────────────────────────────────────────
#> ── nflverse play by play ───────────────────────────────────────────────────────
#> ℹ Data updated: 2025-06-05 08:30:10 UTC
#> # A tibble: 539 × 372
#>    play_id game_id     old_game_id home_team away_team season_type  week posteam
#>      <dbl> <chr>       <chr>       <chr>     <chr>     <chr>       <int> <chr>  
#>  1       1 2020_20_BU… 2021012401  KC        BUF       POST           20 NA     
#>  2      42 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  3      57 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  4      78 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  5     102 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  6     123 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  7     145 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  8     174 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#>  9     207 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#> 10     236 2020_20_BU… 2021012401  KC        BUF       POST           20 BUF    
#> # ℹ 529 more rows
#> # ℹ 364 more variables: posteam_type <chr>, defteam <chr>, side_of_field <chr>,
#> #   yardline_100 <dbl>, game_date <chr>, quarter_seconds_remaining <dbl>,
#> #   half_seconds_remaining <dbl>, game_seconds_remaining <dbl>,
#> #   game_half <chr>, quarter_end <dbl>, drive <dbl>, sp <dbl>, qtr <dbl>,
#> #   down <dbl>, goal_to_go <int>, time <chr>, yrdln <chr>, ydstogo <dbl>,
#> #   ydsnet <dbl>, desc <chr>, play_type <chr>, yards_gained <dbl>, …

# }

nflverse Play-by-Play Data
There are three ways to obtain nflverse pbp data.

We recommend using nflreadr::load_pbp() or nflfastR::load_pbp() as the primary method of retrieving pbp data. This uses our automated data infrastructure to download clean data, and we update this on a nightly basis after each game day (and additionally at specific points on game days) during the season.
If this is not quick enough, nflfastR::build_nflfastR_pbp() parses raw pbp json files we save, usually available within 15 minutes after a game has ended.
If you have a SQL database, nflfastR::update_db() helps maintain a pbp database. It uses nflfastR::build_nflfastR_pbp() so can be run on the same schedule (i.e. within 15 minutes after a game has ended).
In all cases, it is recommended to update the data again during the night from Wednesday to Thursday in order to also receive the stat corrections that the NFL will incorporate from Monday to Wednesday at the latest. -> Thursday’s load_pbp() is the cleanest data we have.